{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../imports/api/led.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Led"}]},{"source":"mqtt/lib/connect","imported":["connect"],"specifiers":[{"kind":"named","imported":"connect","local":"connect"}]},{"source":"serialport","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SerialPort"}]}],"exports":{"exported":["config","client"],"specifiers":[{"kind":"local","local":"config","exported":"config"},{"kind":"local","local":"client","exported":"client"}]}}},"options":{"filename":"server/main.js","filenameRelative":"server/main.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"server/main.js.map","sourceFileName":"server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"main"},"ignored":false,"code":"module.export({\n  config: () => config,\n  client: () => client\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Led;\nmodule.watch(require(\"../imports/api/led.js\"), {\n  default(v) {\n    Led = v;\n  }\n\n}, 1);\nlet connect;\nmodule.watch(require(\"mqtt/lib/connect\"), {\n  connect(v) {\n    connect = v;\n  }\n\n}, 2);\nlet SerialPort;\nmodule.watch(require(\"serialport\"), {\n  default(v) {\n    SerialPort = v;\n  }\n\n}, 3);\n\nconst rgbHex = require('rgb-hex');\n\nconst Readline = SerialPort.parsers.Readline;\nconst parser = new Readline();\nvar port = new SerialPort('/dev/cu.usbmodem1431', {\n  baudRate: 9600\n});\nport.pipe(parser); // parse the data from serial into meaningful objects\n\nfunction onData(data) {\n  console.log(\"meteor onData: \" + data); // send the character over mqtt\n  // client.publish(\"led\", text);\n} // setup the callback for the parser\n// our callback function must be wrapped in Meteor.bindEnvironment to avoid Fiber errors\n\n\nparser.on('data', Meteor.bindEnvironment(onData)); // setup the callback for the port\n// Open errors will be emitted as an error event\n\nport.on('error', function (err) {\n  console.log('Error: ', err.message);\n}); // heres wehre you type in your name\n// serial event\n\nfunction writeSerialData(data) {\n  var buffer = Buffer.from(data);\n  port.write(data, function (err) {\n    if (err) {\n      return console.log('Error on write: ', err.message);\n    }\n\n    console.log('meteor wrote', data);\n  });\n} // meteor\n\n\nMeteor.methods({\n  'serial.write'(pixels) {\n    // global ok?\n    var message = \"\"; // get RGB from hex data\n\n    var hexValue = rgbHex(pixels[0], pixels[1], pixels[2]);\n    message = hexValue;\n    writeSerialData(message + '|'); // write data to the port\n\n    client.publish(\"ledgrid\", message); // publish via mqtt\n  },\n\n  'send.name'(name) {\n    console.log(\"Meteor send.name\", name);\n    client.publish(\"name\", name); //publish via mqtt\n  }\n\n}); // MQTT\n\nconst config = {\n  mqttHost: \"mqtt://127.0.0.1\",\n  mqttPort: 1883\n};\nconst client = connect(config.mqttHost);\n// client callback\nclient.on('message', function (topic, message) {// message is Buffer\n  // console.log(\"received_message\", message.toString());\n  // var splitIntoPixels = message.toString().split(\"|\");\n  // for (var i = 0; i < splitIntoPixels.length - 1; i++) {\n  //   console.log(splitIntoPixels[i]);\n  //   writeSerialData(splitIntoPixels[i]);\n  // }\n});\nclient.on(\"connect\", function () {\n  console.log(\"---- mqtt client connected ----\");\n  client.subscribe(\"ledgrid\"); // subscribe to the ledgrid topic\n});\nMeteor.startup(() => {// code to run on server at startup\n});","map":{"version":3,"sources":["server/main.js"],"names":["module","export","config","client","Meteor","watch","require","v","Led","default","connect","SerialPort","rgbHex","Readline","parsers","parser","port","baudRate","pipe","onData","data","console","log","on","bindEnvironment","err","message","writeSerialData","buffer","Buffer","from","write","methods","pixels","hexValue","publish","name","mqttHost","mqttPort","topic","subscribe","startup"],"mappings":"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","file":"server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport Led from '../imports/api/led.js'\nimport { connect } from 'mqtt/lib/connect';\nimport SerialPort from 'serialport';\nconst rgbHex = require('rgb-hex');\n \nconst Readline = SerialPort.parsers.Readline;\nconst parser = new Readline();\nvar port = new SerialPort('/dev/cu.usbmodem1431', {\n  baudRate: 9600\n});\nport.pipe(parser);\n\n\n// parse the data from serial into meaningful objects\nfunction onData(data) {\n  console.log(\"meteor onData: \" + data);\n  \n  // send the character over mqtt\n  // client.publish(\"led\", text);\n}\n\n// setup the callback for the parser\n// our callback function must be wrapped in Meteor.bindEnvironment to avoid Fiber errors\nparser.on('data', Meteor.bindEnvironment(onData));\n\n// setup the callback for the port\n// Open errors will be emitted as an error event\nport.on('error', function(err) {\n  console.log('Error: ', err.message);\n})\n\n// heres wehre you type in your name\n\n\n// serial event\nfunction writeSerialData(data) {\n  var buffer = Buffer.from(data);\n\n  port.write(data, function(err) {\n    if (err) {\n      return console.log('Error on write: ', err.message);\n    }\n    console.log('meteor wrote', data);\n  });\n\n}\n\n// meteor\nMeteor.methods({\n  'serial.write'(pixels) {\n\n    // global ok?\n    var message = \"\";\n\n    // get RGB from hex data\n    var hexValue = rgbHex(pixels[0], pixels[1], pixels[2]);\n\n    message = hexValue;\n\n    writeSerialData(message + '|'); // write data to the port\n    client.publish(\"ledgrid\", message); // publish via mqtt\n    \n  },\n  'send.name'(name) {\n\n    console.log(\"Meteor send.name\", name);\n    client.publish(\"name\", name); //publish via mqtt\n\n  }\n})\n\n \n// MQTT\nexport const config = {\n  mqttHost: \"mqtt://127.0.0.1\",\n  mqttPort: 1883\n};\n\nexport const client = connect(config.mqttHost);\n\n// client callback\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  // console.log(\"received_message\", message.toString());\n\n  // var splitIntoPixels = message.toString().split(\"|\");\n\n  // for (var i = 0; i < splitIntoPixels.length - 1; i++) {\n  //   console.log(splitIntoPixels[i]);\n  //   writeSerialData(splitIntoPixels[i]);\n  // }\n})\n\nclient.on(\"connect\", function() {\n  console.log(\"---- mqtt client connected ----\");\n  client.subscribe(\"ledgrid\"); // subscribe to the ledgrid topic\n})\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]},"hash":"c6e20026beb47539a04fe59a7340bc4c2659b59d"}
