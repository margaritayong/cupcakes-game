[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"led.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                       //\n// imports/api/led.js                                                                    //\n//                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////\n                                                                                         //\nmodule.export({\n  Led: () => Led\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nconst Led = new Mongo.Collection('led');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('led', function ledPublication() {\n    return Led.find({});\n  });\n} // http://docs.meteor.com/api/collections.html#Mongo-Collection-upsert\n\n\nMeteor.methods({\n  'led.insert'(pixels) {}\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                       //\n// server/main.js                                                                        //\n//                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////\n                                                                                         //\nmodule.export({\n  config: () => config,\n  client: () => client\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Led;\nmodule.watch(require(\"../imports/api/led.js\"), {\n  default(v) {\n    Led = v;\n  }\n\n}, 1);\nlet connect;\nmodule.watch(require(\"mqtt/lib/connect\"), {\n  connect(v) {\n    connect = v;\n  }\n\n}, 2);\nlet SerialPort;\nmodule.watch(require(\"serialport\"), {\n  default(v) {\n    SerialPort = v;\n  }\n\n}, 3);\n\nconst rgbHex = require('rgb-hex');\n\nconst Readline = SerialPort.parsers.Readline;\nconst parser = new Readline();\nvar port = new SerialPort('/dev/cu.usbmodem1431', {\n  baudRate: 9600\n});\nport.pipe(parser); // parse the data from serial into meaningful objects\n\nfunction onData(data) {\n  console.log(\"meteor onData: \" + data); // send the character over mqtt\n  // client.publish(\"led\", text);\n} // setup the callback for the parser\n// our callback function must be wrapped in Meteor.bindEnvironment to avoid Fiber errors\n\n\nparser.on('data', Meteor.bindEnvironment(onData)); // setup the callback for the port\n// Open errors will be emitted as an error event\n\nport.on('error', function (err) {\n  console.log('Error: ', err.message);\n}); // heres wehre you type in your name\n// serial event\n\nfunction writeSerialData(data) {\n  var buffer = Buffer.from(data);\n  port.write(data, function (err) {\n    if (err) {\n      return console.log('Error on write: ', err.message);\n    }\n\n    console.log('meteor wrote', data);\n  });\n} // meteor\n\n\nMeteor.methods({\n  'serial.write'(pixels) {\n    // global ok?\n    var message = \"\"; // get RGB from hex data\n\n    var hexValue = rgbHex(pixels[0], pixels[1], pixels[2]);\n    message = hexValue;\n    writeSerialData(message + '|'); // write data to the port\n\n    client.publish(\"ledgrid\", message); // publish via mqtt\n  },\n\n  'send.name'(name) {\n    console.log(\"Meteor send.name\", name);\n    client.publish(\"name\", name); //publish via mqtt\n  }\n\n}); // MQTT\n\nconst config = {\n  mqttHost: \"mqtt://127.0.0.1\",\n  mqttPort: 1883\n};\nconst client = connect(config.mqttHost);\n// client callback\nclient.on('message', function (topic, message) {// message is Buffer\n  // console.log(\"received_message\", message.toString());\n  // var splitIntoPixels = message.toString().split(\"|\");\n  // for (var i = 0; i < splitIntoPixels.length - 1; i++) {\n  //   console.log(splitIntoPixels[i]);\n  //   writeSerialData(splitIntoPixels[i]);\n  // }\n});\nclient.on(\"connect\", function () {\n  console.log(\"---- mqtt client connected ----\");\n  client.subscribe(\"ledgrid\"); // subscribe to the ledgrid topic\n});\nMeteor.startup(() => {// code to run on server at startup\n});\n///////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/led.js","server/main.js"],"names":["module","export","Led","Mongo","watch","require","v","check","Collection","Meteor","isServer","publish","ledPublication","find","methods","pixels","config","client","default","connect","SerialPort","rgbHex","Readline","parsers","parser","port","baudRate","pipe","onData","data","console","log","on","bindEnvironment","err","message","writeSerialData","buffer","Buffer","from","write","hexValue","name","mqttHost","mqttPort","topic","subscribe","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nexport const Led = new Mongo.Collection('led');\nimport { check } from 'meteor/check';\n\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('led', function ledPublication() {\n    return Led.find({});\n  });\n}\n\n// http://docs.meteor.com/api/collections.html#Mongo-Collection-upsert\nMeteor.methods({\n  'led.insert'(pixels) {\n    \n  }\n})","import { Meteor } from 'meteor/meteor';\nimport Led from '../imports/api/led.js'\nimport { connect } from 'mqtt/lib/connect';\nimport SerialPort from 'serialport';\nconst rgbHex = require('rgb-hex');\n \nconst Readline = SerialPort.parsers.Readline;\nconst parser = new Readline();\nvar port = new SerialPort('/dev/cu.usbmodem1431', {\n  baudRate: 9600\n});\nport.pipe(parser);\n\n\n// parse the data from serial into meaningful objects\nfunction onData(data) {\n  console.log(\"meteor onData: \" + data);\n  \n  // send the character over mqtt\n  // client.publish(\"led\", text);\n}\n\n// setup the callback for the parser\n// our callback function must be wrapped in Meteor.bindEnvironment to avoid Fiber errors\nparser.on('data', Meteor.bindEnvironment(onData));\n\n// setup the callback for the port\n// Open errors will be emitted as an error event\nport.on('error', function(err) {\n  console.log('Error: ', err.message);\n})\n\n// heres wehre you type in your name\n\n\n// serial event\nfunction writeSerialData(data) {\n  var buffer = Buffer.from(data);\n\n  port.write(data, function(err) {\n    if (err) {\n      return console.log('Error on write: ', err.message);\n    }\n    console.log('meteor wrote', data);\n  });\n\n}\n\n// meteor\nMeteor.methods({\n  'serial.write'(pixels) {\n\n    // global ok?\n    var message = \"\";\n\n    // get RGB from hex data\n    var hexValue = rgbHex(pixels[0], pixels[1], pixels[2]);\n\n    message = hexValue;\n\n    writeSerialData(message + '|'); // write data to the port\n    client.publish(\"ledgrid\", message); // publish via mqtt\n    \n  },\n  'send.name'(name) {\n\n    console.log(\"Meteor send.name\", name);\n    client.publish(\"name\", name); //publish via mqtt\n\n  }\n})\n\n \n// MQTT\nexport const config = {\n  mqttHost: \"mqtt://127.0.0.1\",\n  mqttPort: 1883\n};\n\nexport const client = connect(config.mqttHost);\n\n// client callback\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  // console.log(\"received_message\", message.toString());\n\n  // var splitIntoPixels = message.toString().split(\"|\");\n\n  // for (var i = 0; i < splitIntoPixels.length - 1; i++) {\n  //   console.log(splitIntoPixels[i]);\n  //   writeSerialData(splitIntoPixels[i]);\n  // }\n})\n\nclient.on(\"connect\", function() {\n  console.log(\"---- mqtt client connected ----\");\n  client.subscribe(\"ledgrid\"); // subscribe to the ledgrid topic\n})\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]