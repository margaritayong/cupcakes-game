[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"goal.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                       //\n// imports/api/goal.js                                                                   //\n//                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////\n                                                                                         //\nmodule.export({\n  Goal: () => Goal\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nconst Goal = new Mongo.Collection('goal');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('goal', function goalPublication() {\n    return Goal.find({});\n  });\n} // http://docs.meteor.com/api/collections.html#Mongo-Collection-upsert\n\n\nMeteor.methods({\n  'goals.upsert'(targetGoal) {\n    Goal.upsert({\n      goal: goal\n    }, {\n      $set: {\n        goal: goal,\n        updatedAt: new Date()\n      }\n    });\n  }\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////\n\n},\"led.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                       //\n// imports/api/led.js                                                                    //\n//                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////\n                                                                                         //\nmodule.export({\n  Led: () => Led\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nconst Led = new Mongo.Collection('led');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('led', function ledPublication() {\n    return Led.find({});\n  });\n} // http://docs.meteor.com/api/collections.html#Mongo-Collection-upsert\n\n\nMeteor.methods({\n  'led.insert'(pixels) {}\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                       //\n// server/main.js                                                                        //\n//                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////\n                                                                                         //\nmodule.export({\n  config: () => config,\n  client: () => client\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Led;\nmodule.watch(require(\"../imports/api/led.js\"), {\n  default(v) {\n    Led = v;\n  }\n\n}, 1);\nlet Goal;\nmodule.watch(require(\"../imports/api/goal.js\"), {\n  default(v) {\n    Goal = v;\n  }\n\n}, 2);\nlet connect;\nmodule.watch(require(\"mqtt/lib/connect\"), {\n  connect(v) {\n    connect = v;\n  }\n\n}, 3);\nlet SerialPort;\nmodule.watch(require(\"serialport\"), {\n  default(v) {\n    SerialPort = v;\n  }\n\n}, 4);\n\nconst rgbHex = require('rgb-hex');\n\nconst Readline = SerialPort.parsers.Readline;\nconst parser = new Readline();\nvar port = new SerialPort('/dev/cu.usbmodem1431', {\n  baudRate: 9600\n});\nport.pipe(parser); // parse the data from serial into meaningful objects\n\nfunction onData(data) {\n  console.log(\"meteor onData: \" + data); // send the character over mqtt\n  // client.publish(\"led\", text);\n} // setup the callback for the parser\n// our callback function must be wrapped in Meteor.bindEnvironment to avoid Fiber errors\n\n\nparser.on('data', Meteor.bindEnvironment(onData)); // setup the callback for the port\n// Open errors will be emitted as an error event\n\nport.on('error', function (err) {\n  console.log('Error: ', err.message);\n}); // heres wehre you type in your name\n// serial event\n\nfunction writeSerialData(data) {\n  var buffer = Buffer.from(data);\n  port.write(data, function (err) {\n    if (err) {\n      return console.log('Error on write: ', err.message);\n    }\n\n    console.log('meteor wrote', data);\n  });\n}\n\nfunction saveCoderInDataBase(targetGoal) {\n  Meteor.call('goals.upsert', targetGoal);\n} // meteor\n\n\nMeteor.methods({\n  'serial.write'(pixels) {\n    // global ok?\n    var message = \"\"; // get RGB from hex data\n\n    var hexValue = rgbHex(pixels[0], pixels[1], pixels[2]);\n    message = hexValue;\n    writeSerialData(message + '|'); // write data to the port\n\n    client.publish(\"ledgrid\", message); // publish via mqtt\n  },\n\n  'send.goal'(targetGoal) {\n    console.log(\"Meteor send.goal\", targetGoal);\n    client.publish(\"targetGoal\", targetGoal); // publish via mqtt\n  }\n\n}); // MQTT\n\nconst config = {\n  mqttHost: \"mqtt://127.0.0.1\",\n  mqttPort: 1883\n};\nconst client = connect(config.mqttHost);\n\nfunction onMessage(topic, message) {\n  if (topic === \"targetGoal\") {\n    console.log(\"message\", message.toString());\n    Meteor.call('goals.upsert', targetGoal);\n  }\n} // client callback\n\n\nclient.on('message', Meteor.bindEnvironment(onMessage));\nclient.on(\"connect\", function () {\n  console.log(\"---- mqtt client connected ----\");\n  client.subscribe(\"targetGoal\"); // subscribe to the targetGoal topic\n});\nMeteor.startup(() => {// code to run on server at startup\n});\n///////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/goal.js","imports/api/led.js","server/main.js"],"names":["module","export","Goal","Mongo","watch","require","v","check","Collection","Meteor","isServer","publish","goalPublication","find","methods","targetGoal","upsert","goal","$set","updatedAt","Date","Led","ledPublication","pixels","config","client","default","connect","SerialPort","rgbHex","Readline","parsers","parser","port","baudRate","pipe","onData","data","console","log","on","bindEnvironment","err","message","writeSerialData","buffer","Buffer","from","write","saveCoderInDataBase","call","hexValue","mqttHost","mqttPort","onMessage","topic","toString","subscribe","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nexport const Goal = new Mongo.Collection('goal');\nimport { check } from 'meteor/check';\n\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('goal', function goalPublication() {\n    return Goal.find({});\n  });\n}\n\n// http://docs.meteor.com/api/collections.html#Mongo-Collection-upsert\nMeteor.methods({\n  'goals.upsert'(targetGoal) {\n\n    Goal.upsert({\n      goal: goal\n    },\n    {\n      $set: {\n        goal: goal,\n        updatedAt: new Date(),\n      }\n    });\n  }\n})","import { Mongo } from 'meteor/mongo';\nexport const Led = new Mongo.Collection('led');\nimport { check } from 'meteor/check';\n\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('led', function ledPublication() {\n    return Led.find({});\n  });\n}\n\n// http://docs.meteor.com/api/collections.html#Mongo-Collection-upsert\nMeteor.methods({\n  'led.insert'(pixels) {\n    \n  }\n})","import { Meteor } from 'meteor/meteor';\nimport Led from '../imports/api/led.js'\nimport Goal from '../imports/api/goal.js'\nimport { connect } from 'mqtt/lib/connect';\nimport SerialPort from 'serialport';\nconst rgbHex = require('rgb-hex');\n \nconst Readline = SerialPort.parsers.Readline;\nconst parser = new Readline();\nvar port = new SerialPort('/dev/cu.usbmodem1431', {\n  baudRate: 9600\n});\nport.pipe(parser);\n\n\n// parse the data from serial into meaningful objects\nfunction onData(data) {\n  console.log(\"meteor onData: \" + data);\n  \n  // send the character over mqtt\n  // client.publish(\"led\", text);\n}\n\n// setup the callback for the parser\n// our callback function must be wrapped in Meteor.bindEnvironment to avoid Fiber errors\nparser.on('data', Meteor.bindEnvironment(onData));\n\n// setup the callback for the port\n// Open errors will be emitted as an error event\nport.on('error', function(err) {\n  console.log('Error: ', err.message);\n})\n\n// heres wehre you type in your name\n\n\n// serial event\nfunction writeSerialData(data) {\n  var buffer = Buffer.from(data);\n\n  port.write(data, function(err) {\n    if (err) {\n      return console.log('Error on write: ', err.message);\n    }\n    console.log('meteor wrote', data);\n  });\n\n}\n\nfunction saveCoderInDataBase(targetGoal) {\n  Meteor.call('goals.upsert', targetGoal);\n}\n\n// meteor\nMeteor.methods({\n  'serial.write'(pixels) {\n\n    // global ok?\n    var message = \"\";\n\n    // get RGB from hex data\n    var hexValue = rgbHex(pixels[0], pixels[1], pixels[2]);\n\n    message = hexValue;\n\n    writeSerialData(message + '|'); // write data to the port\n    client.publish(\"ledgrid\", message); // publish via mqtt\n    \n  },\n  'send.goal'(targetGoal) {\n\n    console.log(\"Meteor send.goal\", targetGoal);\n    client.publish(\"targetGoal\", targetGoal); // publish via mqtt\n\n  }\n})\n\n \n// MQTT\nexport const config = {\n  mqttHost: \"mqtt://127.0.0.1\",\n  mqttPort: 1883\n};\n\nexport const client = connect(config.mqttHost);\n\nfunction onMessage(topic, message) {\n  if (topic === \"targetGoal\") {\n    console.log(\"message\", message.toString());\n    Meteor.call('goals.upsert', targetGoal);\n  }\n}\n\n// client callback\nclient.on('message', Meteor.bindEnvironment(onMessage));\n\nclient.on(\"connect\", function() {\n  console.log(\"---- mqtt client connected ----\");\n  client.subscribe(\"targetGoal\"); // subscribe to the targetGoal topic\n})\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]